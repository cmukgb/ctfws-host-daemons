#!/usr/bin/python3

import logging
import sched
import threading
import time
import paho.mqtt.client as mqtt

logging.basicConfig(level=logging.DEBUG)

def schedthread(sched):
	sched.run()

def tick(client, udata) :
	logging.debug("tick")
	client.publish("ctfws/timesync", payload=str(int(time.time())), qos=0, retain=False)
	udata['se'] = udata['sched'].enter(60, 0, tick, (client, udata))

def on_connect(client, udata, flags, rc):
	logging.debug("on_conn: %d", rc)
	if rc != 0 : return
	client.subscribe("ctfws/game/config", 1)
	client.subscribe("ctfws/game/endtime", 1)
	client.publish("ctfws/dev/timesyncd/beat", payload="alive", qos=2, retain=True)

def upd(client, udata):
	logging.debug("upd: %r %r %r", udata['se'] is not None, udata['gstart'], udata['gend'])
	if udata['se'] is not None :
		udata['sched'].cancel(udata['se'])
		udata['se'] = None

	if udata['gstart'] is None:
		if udata['st'] is not None : udata['st'].join()
		return

	if udata['gend'] is None or udata['gend'] <= udata['gstart'] :
		tick(client, udata)
		if udata['st'] is None :
			udata['st'] = threading.Thread(target=schedthread, args=(udata['sched'],))
			udata['st'].start()

def on_disconnect(client, udata):
	logging.debug("disconnect")
	udata['gstart'] = None
	udata['gend'] = None
	upd(client, udata)

def on_config_message(client, udata, msg):
	logging.debug("config: %s", msg.payload)
	if msg.payload == b"none" :
		udata['gstart'] = None
	else:
		st, _ = str(msg.payload).split(r'\s+', 1)
		udata['gstart'] = int(st)
	upd(client, udata)

def on_end_message(client, udata, msg):
	logging.debug("endtime: %s", msg.payload)
	udata['gend'] = int(msg.payload)
	upd(client, udata)


udata           = {}
udata['sched']  = sched.scheduler()
udata['st']     = None
udata['se']     = None
udata['gstart'] = None		# Last recorded start time
udata['gend']   = None		# Last recorded end time

client = mqtt.Client(userdata=udata)
client.will_set("ctfws/dev/ctfwstimesyncd/beat", payload="dead", qos=2, retain=True)
with open("passwords/timesync-password.txt") as pwf :
    client.username_pw_set("ctfwstimesyncd", pwf.read().rstrip())

client.on_connect = on_connect
client.message_callback_add("ctfws/game/config", on_config_message)
client.message_callback_add("ctfws/game/endtime", on_end_message)

client.connect_async("kgb.club.cc.cmu.edu", port=1883, keepalive=65)
client.loop_start()

logging.info("client loop started")

client._thread.join()
